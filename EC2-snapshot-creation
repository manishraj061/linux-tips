# Automated AMI Backups
#
# This script will search for all instances having a tag with "Backup" or "backup"
# on it. As soon as we have the instances list, we loop through each instance
# and create an AMI of it. Also, it will look for a "Retention" tag key which
# will be used as a retention policy number in days. If there is no tag with
# that name, it will use a 7 days default value for each AMI.
#
# After creating the AMI it creates a "DeleteOn" tag on the AMI indicating when
# it will be deleted using the Retention value and another Lambda function 

import boto3
import collections
import datetime
import sys
import pprint
from botocore.config import Config

config = Config(
    retries = dict(
        max_attempts = 7
    )
)

ec = boto3.client('ec2', config=config)
ec2 = boto3.resource('ec2')
tag = ec2.Tag('resource_id','key','value')

def lambda_handler(event, context):
    
    reservations = ec.describe_instances(
        Filters=[
            {'Name': 'tag:Backup', 'Values': ['daily', 'Daily']},
        ]
    ).get(
        'Reservations', []
    )

    instances = sum(
        [
            [i for i in r['Instances']]
            for r in reservations
        ], [])

    print "Found %d instances that need backing up: " % len(instances)
    print "========"

    to_tag = collections.defaultdict(list)
    
    for instance in instances:
        try:
            retention_days = [
                int(t.get('Value')) for t in instance['Tags']
                if t['Key'] == 'Retention'][0]
        except IndexError:
            retention_days = 7
        
        finally:
            create_time = datetime.datetime.now()
            create_fmt = create_time.strftime('%H-%M-%S(UTC)--on--%Y-%m-%d')
            for t in instance['Tags']:
                if t['Key']=='Name':
                    instance_name = t['Value']
            
            AMIid = ec.create_image(InstanceId=instance['InstanceId'], Name="Lambda_Daily - " + instance['InstanceId'] + " // " + instance_name + " // " + create_fmt, Description="Lambda created AMI of instance " + instance['InstanceId'] + " from " + create_fmt, NoReboot=True, DryRun=False)


            print instance['InstanceId'] + " (" + instance_name + ")"

            to_tag[retention_days].append(AMIid['ImageId'])
            
            print "Creating AMI %s of instance %s and retaining for %d days" % (
                AMIid['ImageId'],
                instance['InstanceId'],
                retention_days,
            )
            print "--------"
            amiid = AMIid['ImageId']
            instanceid = instance['InstanceId']
            tag_image = ec2.Image(amiid)
            tag_image.create_tags(
                Tags=[
                    {'Key': 'InstanceID', 'Value': instanceid},
                ]
            )

    #print to_tag.keys()
    print "========"
    
    for retention_days in to_tag.keys():
        delete_date = datetime.date.today() + datetime.timedelta(days=retention_days)
        delete_fmt = delete_date.strftime('%d-%m-%Y')
        print "Will delete %d AMIs on %s" % (len(to_tag[retention_days]), delete_fmt)
        print "========"

        ec.create_tags(
            Resources=to_tag[retention_days],
            Tags=[
                {'Key': 'DeleteOn', 'Value': delete_fmt},
            ]
        )
        
        #print ec.create_tags
        #print "========"

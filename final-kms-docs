IAM Role for KMS
=========================================
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ec2:DetachVolume",
                "ec2:AttachVolume",
                "kms:ListKeyPolicies",
                "kms:GetKeyPolicy",
                "iam:ListRoles",
                "ec2:CreateVolume",
                "kms:ListKeys",
                "kms:GetKeyRotationStatus",
                "kms:ListAliases",
                "kms:CreateAlias",
                "kms:DescribeKey",
                "kms:CreateKey",
                "iam:ListUsers"
            ],
            "Resource": "*"
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "kms:Encrypt",
                "kms:DescribeKey",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*"
            ],
            "Resource": "<KMS-ARN>"
        },
        {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": "kms:Decrypt",
            "Resource": "<KMS-ARN>"
        },
        {
            "Sid": "VisualEditor3",
            "Effect": "Allow",
            "Action": "kms:ListKeys",
            "Resource": "<KMS-ARN>"
        },
        {
            "Sid": "VisualEditor4",
            "Effect": "Deny",
            "Action": [
                "kms:ScheduleKeyDeletion",
                "kms:DisableKey"
            ],
            "Resource": "*"
        }
    ]
}
==========================================================
KMS KEY Policy
{
    "Version": "2012-10-17",
    "Id": "key-consolepolicy-3",
    "Statement": [
        {
            "Sid": "Allow access for Key Administrators",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::<Account-number>:role/manishthird"
            },
            "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
            ],
            "Resource": "*"
        },
        {
            "Sid": "Allow use of the key",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::<Account-number>:role/prd-kms-role"
            },
            "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
            ],
            "Resource": "*"
        },
        {
            "Sid": "Allow attachment of persistent resources",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::<Account-number>:role/prd-kms-role"
            },
            "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RevokeGrant"
            ],
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "kms:ViaService": "ec2.ap-south-1.amazonaws.com"
                }
            }
        }
    ]
}
=======================================================================
AWS CLI:
--------------------------------
Create encrypted volume:

# aws ec2 create-volume --size 2 --region ap-south-1 \
> --availability-zone ap-south-1a --volume-type gp2 \
> --kms-key-id <ARN of KMS key> \
> --profile default --encrypted
-----------------------------------------------------------------
Attach volume to instance :
 # aws ec2 attach-volume --volume-id <volume-id> --instance-id <instance-id> --device /dev/sdh
-----------------------------------------------------

Detach volume from instance :

# aws ec2 detach-volume --volume-id <volume-id> --instance-id <instance-id> --device /dev/sdh

===============================================================================================================

AWS Lambda for alert KMS unauthorized access:

#!/usr/bin/python
import json
import requests
webhookurl='https://hooks.slack.com/services/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'
def lambda_handler(event, context):
    data={'text': event['detail']['errorMessage']}
    response = requests.post(webhookurl, data=json.dumps(data), headers={'Content-Type': 'application/json'})
    print('Response: ' + str(response.text))
    print('Response code: ' + str(response.status_code))
    print event['detail']['errorMessage']
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
    -----------------------------------------------------------------------------------------------------------------------
    Upload python module to aws lambda 
    python
   29  mkdir package
   30  mkdir my-function
   31  cd my-function
   32  mkdir package
   33  cd package
   34  pip install requests --target .
   35  yum insall python-pip
   36  yum install python-pip
   37  pip install requests --target .
   38  ll
   39  zip -r9 ../function.zip
   40  zip -r9 ../function.zip .
   41  ll
   42  cd ..
   43  ll
   44  vim slack.py
   45  chmod 777 slack.py
   46  zip -g function.zip function.py
   47  zip -g function.zip slack.py
   48  ll
   49  aws lambda update-function-code --function-name lambda-test --zip-file fileb://function.zip
